{"remainingRequest":"D:\\project\\中国古代天文学成就可视化\\myapp\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\project\\中国古代天文学成就可视化\\myapp\\src\\components\\itemOne.vue?vue&type=template&id=783eb21a&scoped=true","dependencies":[{"path":"D:\\project\\中国古代天文学成就可视化\\myapp\\src\\components\\itemOne.vue","mtime":1741676928565},{"path":"D:\\project\\中国古代天文学成就可视化\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1732372474236},{"path":"D:\\project\\中国古代天文学成就可视化\\myapp\\node_modules\\babel-loader\\lib\\index.js","mtime":1732372475869},{"path":"D:\\project\\中国古代天文学成就可视化\\myapp\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1732372477042},{"path":"D:\\project\\中国古代天文学成就可视化\\myapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1732372474236},{"path":"D:\\project\\中国古代天文学成就可视化\\myapp\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1732372476246}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0iY2hhcnQtY29udGFpbmVyIj4KICAgIDxoMiBjbGFzcz0iY2hhcnQtdGl0bGUiPui0p+eJqeWCqOmHjzwvaDI+CiAgICA8dnVlLWVjaGFydHMgOm9wdGlvbnM9Im9wdGlvbnMiIHJlZj0iY2hhcnRSZWYiIC8+CiAgPC9kaXY+Cg=="},{"version":3,"sources":["D:\\project\\中国古代天文学成就可视化\\myapp\\src\\components\\itemOne.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EAClD,CAAC,CAAC,CAAC,CAAC,CAAC","file":"D:/project/中国古代天文学成就可视化/myapp/src/components/itemOne.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"chart-container\">\n    <h2 class=\"chart-title\">货物储量</h2>\n    <vue-echarts :options=\"options\" ref=\"chartRef\" />\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport VueEcharts from 'vue-echarts';\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'ProductSalesAreaChart',\n  components: {\n    VueEcharts,\n  },\n  setup() {\n    const chartRef = ref(null);\n    let updateTimer = null;\n\n    const generateRandomData = (baseValue, range) => {\n      return Math.floor(Math.random() * range + baseValue);\n    };\n\n    const options = ref({\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'cross',\n          label: {\n            backgroundColor: '#6a7985'\n          }\n        }\n      },\n      legend: {\n        data: ['产品1', '产品2', '产品3', '产品4', '产品5', '产品6'],\n        top: '5%',\n        textStyle: {\n          color: '#fff'\n        }\n      },\n      xAxis: {\n        type: 'category',\n        boundaryGap: false,\n        data: ['第1周', '第2周', '第3周', '第4周', '第5周', '第6周', '第7周', '第8周'],\n        axisLine: {\n          lineStyle: {\n            color: 'rgba(0, 195, 255, 0.5)'\n          }\n        },\n        axisLabel: {\n          color: '#fff'\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: 'rgba(0, 195, 255, 0.1)'\n          }\n        },\n        axisLine: {\n          lineStyle: {\n            color: 'rgba(0, 195, 255, 0.5)'\n          }\n        },\n        axisLabel: {\n          color: '#fff'\n        }\n      },\n      animationDuration: 1000,\n      animationEasing: 'cubicOut',\n      animationDelay: function (idx) {\n        return idx * 200;\n      },\n      series: [\n        {\n          name: '产品1',\n          type: 'line',\n          stack: '总量',\n          areaStyle: {\n            opacity: 0.3\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [120, 132, 101, 134, 90, 230, 210, 180]\n        },\n        {\n          name: '产品2',\n          type: 'line',\n          stack: '总量',\n          areaStyle: {\n            opacity: 0.3\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [220, 182, 191, 234, 290, 330, 310, 320]\n        },\n        {\n          name: '产品3',\n          type: 'line',\n          stack: '总量',\n          areaStyle: {\n            opacity: 0.3\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [150, 232, 201, 154, 190, 330, 410, 380]\n        },\n        {\n          name: '产品4',\n          type: 'line',\n          stack: '总量',\n          areaStyle: {\n            opacity: 0.3\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [320, 332, 301, 334, 390, 330, 320, 310]\n        },\n        {\n          name: '产品5',\n          type: 'line',\n          stack: '总量',\n          areaStyle: {\n            opacity: 0.3\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [820, 932, 901, 934, 1290, 1230, 1210, 1180]\n        },\n        {\n          name: '产品6',\n          type: 'line',\n          stack: '总量',\n          areaStyle: {\n            opacity: 0.3\n          },\n          emphasis: {\n            focus: 'series'\n          },\n          data: [820, 932, 901, 934, 1290, 1230, 1210, 1180]\n        }\n      ]\n    });\n\n    const updateData = () => {\n      if (chartRef.value) {\n        const newData = options.value.series.map(series => {\n          const lastValue = series.data[series.data.length - 1];\n          const newValue = generateRandomData(lastValue * 0.9, lastValue * 0.2);\n          return [...series.data.slice(1), newValue];\n        });\n\n        // 更新每个系列的数据\n        options.value.series.forEach((series, index) => {\n          series.data = newData[index];\n        });\n\n        // 更新x轴时间\n        const currentWeek = parseInt(options.value.xAxis.data[7].match(/\\d+/)[0]);\n        options.value.xAxis.data = options.value.xAxis.data.slice(1).concat([`第${currentWeek + 1}周`]);\n\n        // 修改这里的更新方式\n        chartRef.value.setOption(options.value);\n      }\n    };\n\n    onMounted(() => {\n      if (chartRef.value) {\n        chartRef.value.setOption(options.value);\n        updateTimer = setInterval(updateData, 2000);\n      }\n    });\n\n    onUnmounted(() => {\n      if (updateTimer) {\n        clearInterval(updateTimer);\n      }\n    });\n\n    return {\n      options,\n      chartRef\n    };\n  }\n};\n</script>\n\n<style scoped>\n.chart-container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.chart-title {\n  color: #fff;\n  font-size: 16px;\n  text-align: center;\n  margin-bottom: 10px;\n}\n\n:deep(.echarts) {\n  width: 100% !important;\n  height: calc(100% - 30px) !important;\n}\n</style>"]}]}